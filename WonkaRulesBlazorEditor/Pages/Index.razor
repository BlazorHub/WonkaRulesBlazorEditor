@page "/"
@page "/dropdown"
@page "/selectbar"
@page "/splitbutton"
@page "/tabs"
@page "/textarea"
@page "/tree"

@using WonkaRulesBlazorEditor.Data
@inject IpfsService publishService

@inject DialogService  dialogService

<RadzenDialog />

<h1>Rule Tree Editor</h1>

Use this utility to view/edit your Wonka RuleTree.

<br />

<div class="row">

    <div class="col-md-6">
        <RadzenAccordion>
            <Items>
                <RadzenAccordionItem Text="Metadata/Rules" Icon="get_app">
                    <div style="margin-top:20px">Metadata File URL:</div>
                    <div class="row">
                        <RadzenTextBox @bind-Value="@currMetadataUrl" Style="margin-bottom: 10px; width: 500px" Change="@(args => ChooseMetadataUrlChange(args, "TextBox"))" MaxLength="1024" />
                    </div>
                    <div style="margin-top:20px">Rules File URL:</div>
                    <div class="row">
                        <RadzenTextBox @bind-Value="@currRulesUrl" Style="margin-bottom: 10px; width: 500px" Change="@(args => ChooseRulesUrlChange(args, "TextBox"))" MaxLength="1024" />
                    </div>
                    <div class="row">
                        <RadzenButton Text="Open" Click="@((args) => OpenRulesXmlHandler(args, "Button with text"))" Style="margin-bottom: 10px; margin-left: 20px; width: 100px" />
                    </div>
                </RadzenAccordionItem>
			</Items>
		</RadzenAccordion>
        <RadzenTree Data="@entries" Expand="@LoadFiles" Change="@SelectRow">
            <RadzenTreeLevel Text="@GetTextForNode" />
        </RadzenTree>
    </div>

    <div class="col-md-6">
        <RadzenTabs Change="@(idx => SwitchTab(idx, "Tabs"))">
            <Tabs>
                <RadzenTabsItem Text="Details">
                    <RadzenCard style="overflow: auto;height:500px;">
                        <div class="row">
                            @foreach (var e in details.OrderByDescending(i => i.Key))
                            {
                                @e.Value
                                <br />
                            }
                        </div>
                    </RadzenCard>
                    <br />
                    <RadzenButton Text="Remove" Click="@((args) => RemoveRuleHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                </RadzenTabsItem>
                <RadzenTabsItem Text="Add Rule">
                    <RadzenCard Style="padding: 20px;">
                        <br />
                        <h4>Rule Desc Code:</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddRuleIdHandler(args, "TextBox"))" />
                        <br />
                        <h4>Select the parent RuleSet:</h4>
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Data="@(allRuleSetNames.Where(s => s != "Root").Select(s => new { RSName = s }))" TextProperty="RSName" ValueProperty="RSName" Style="margin-bottom: 20px" Change="@(args => AddRuleTargetRSChange(args, @currRuleSet.Description))" />
                        <br />
                        <h4>Select the target Attribute:</h4>
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Data="@(rulesEngine.RefEnvHandle.AttrCache.Select(a => new { AName = a.AttrName }))" TextProperty="AName" ValueProperty="AName" Style="margin-bottom: 20px" Change="@(args => AddRuleTargetAttrChange(args, @currRuleSet.Description))" />
                        <br />
                        <h4>Select the Rule type:</h4>
                        <RadzenSelectBar @bind-Value="addRuleChoice" TValue="int" Change="@((args) => AddRuleTargetTypeChange(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
                            <Items>
                                <RadzenSelectBarItem Text="ArithmeticLimitRule" Value="1" />
                                <!--<RadzenSelectBarItem Text="ArithmeticRule" Value="2" />-->
                                <RadzenSelectBarItem Text="AssignmentRule" Value="3" />
                                <!--<RadzenSelectBarItem Text="CustomOperatorRule" Value="4" /> -->
                                <RadzenSelectBarItem Text="DateLimitRule" Value="5" />
                                <RadzenSelectBarItem Text="DomainRule" Value="6" />
                                <RadzenSelectBarItem Text="PopulatedRule" Value="7" />
                            </Items>
                        </RadzenSelectBar>
                        <br />
                        <h4>Apply the NOT operator:</h4>
                        <RadzenCheckBox @bind-Value="@addRuleNotOp" Style="margin-bottom: 20px" TValue="bool" Change="@(args => AddRuleNotOpHandler(args, "CheckBox1 CheckBox"))" />
                        <br />
                        <h4>Value1/MinValue:</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddRuleValue1Handler(args, "TextBox"))" />
                        <br />
                        <h4>Value2/MaxValue:</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddRuleValue2Handler(args, "TextBox"))" />
                        <br />
                        <RadzenButton Text="Add Rule" Click="@((args) => AddRuleHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                    </RadzenCard>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Add Eth Rule">
                    <RadzenCard Style="padding: 20px;">
                        <br />
                        <h4>Ethereum Rule Desc Code:</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddRuleIdHandler(args, "TextBox"))" />
                        <br />
                        <h4>Select the parent RuleSet:</h4>
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Data="@(allRuleSetNames.Where(s => s != "Root").Select(s => new { RSName = s }))" TextProperty="RSName" ValueProperty="RSName" Style="margin-bottom: 20px" Change="@(args => AddRuleTargetRSChange(args, @currRuleSet.Description))" />
                        <br />
                        <h4>Select the target Attribute:</h4>
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Data="@(rulesEngine.RefEnvHandle.AttrCache.Select(a => new { AName = a.AttrName }))" TextProperty="AName" ValueProperty="AName" Style="margin-bottom: 20px" Change="@(args => AddRuleTargetAttrChange(args, @currRuleSet.Description))" />
                        <h4>Select the Rule type:</h4>
                        <br />
                        <RadzenSelectBar @bind-Value="addNethRuleOpChoice" TValue="int" Change="@((args) => AddNethRuleOpChange(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
                            <Items>
                                <RadzenSelectBarItem Text="EOA Balance" Value="1" />
                                <RadzenSelectBarItem Text="ERC20 Transfers" Value="2" />
                                <RadzenSelectBarItem Text="ERC20 Balance" Value="3" />
                                <RadzenSelectBarItem Text="Contract Method" Value="4" />
                                <RadzenSelectBarItem Text="Validate Signature" Value="5" />
                            </Items>
                        </RadzenSelectBar>
                        <br />
                        <h4>EOA Address (or Contract Address):</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Placeholder="0xde0b295669a9fd93d5f28d9ec85e40f4cb697bae" Change="@(args => AddNethRuleAddressHandler(args, "TextBox"))" />
                        <br />
                        <h4>Value1/MinValue:</h4>
                        <RadzenTextBox @bind-Value="@addRuleValue1" Style="margin-bottom: 20px" Change="@(args => AddRuleValue1Handler(args, "TextBox"))" />
                        <br />
                        <h4>Value2/MaxValue:</h4>
                        <RadzenTextBox @bind-Value="@addRuleValue2" Style="margin-bottom: 20px" Change="@(args => AddRuleValue2Handler(args, "TextBox"))" />
                        <!--
						<br />
						<h4>Contract ABI (if applicable):</h4>
						<RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddNethRuleContractABI(args, "TextBox"))" />
						-->
                        <br />
                        <RadzenButton Text="Add Rule" Click="@((args) => AddNethRuleHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                    </RadzenCard>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Add RuleSet">
                    <RadzenCard Style="padding: 20px;">
                        <br />
                        <h4>Rule Set Description:</h4>
                        <RadzenTextBox Style="margin-bottom: 20px" Change="@(args => AddRuleSetDescHandler(args, "TextBox"))" />
                        <br />
                        <h4>Select the parent RuleSet:</h4>
                        <RadzenDropDown AllowClear="true" TValue="string" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowFiltering="true" Data="@(allRuleSetNames.Where(s => (s != "Root") && !s.EndsWith("(Leaf)")).Select(s => new { RSName = s }))" TextProperty="RSName" ValueProperty="RSName" Style="margin-bottom: 20px" Change="@(args => AddRuleSetTargetRSChange(args, @currRuleSet.Description))" />
                        <br />
                        <h4>Select the RuleSet operator:</h4>
                        <br />
                        <RadzenSelectBar @bind-Value="addRuleSetOpChoice" TValue="int" Change="@((args) => AddRuleSetOpChange(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
                            <Items>
                                <RadzenSelectBarItem Text="And" Value="1" />
                                <RadzenSelectBarItem Text="Or" Value="2" />
                            </Items>
                        </RadzenSelectBar>
                        <h4>Select the RuleSet error level (only for leaf RuleSets):</h4>
                        <br />
                        <RadzenSelectBar @bind-Value="addRuleSetErrLvlChoice" TValue="int" Change="@((args) => AddRuleSetSeverityChange(args, "SelectBar with single selection"))" Style="margin-bottom: 20px;">
                            <Items>
                                <RadzenSelectBarItem Text="Warning" Value="1" />
                                <RadzenSelectBarItem Text="Severe" Value="2" />
                            </Items>
                        </RadzenSelectBar>
                        <br />
                        <br />
                        <RadzenButton Text="Add RuleSet" Click="@((args) => AddRuleSetHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                    </RadzenCard>
                </RadzenTabsItem>
                <RadzenTabsItem Text="Run Engine">
                    <RadzenTabs Change="@(idx => SwitchTab(idx, "Tabs"))">
                        <Tabs>
                            <RadzenTabsItem Text="Off Chain (Local)">
								<RadzenCard Style="padding: 20px;">
									<h3>Attributes and Values:</h3>
									<RadzenTextArea @bind-Value="@attrValues" Cols="50" Rows="8" Style="margin-bottom: 20px" />
									<br />
									<RadzenButton Text="Run" Click="@((args) => RunEngineHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
									<br />
									<h3>RuleTree Report:</h3>
									<RadzenTextArea @bind-Value="@reportMsg" Cols="50" Rows="4" Style="margin-bottom: 20px" />
									<br />
									<h4>Publish RuleReport to IPFS (using the name below):</h4>
									<RadzenTextBox Style="margin-bottom: 20px" Change="@(args => IpfsReportFileNameHandler(args, "TextBox"))" />
									<br />
									<RadzenButton Text="Publish" Click="@((args) => PublishReportToIpfsHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
									<br />
									<h4>Upload New RuleTree to IPFS (using the name below):</h4>
									<RadzenTextBox Style="margin-bottom: 20px" Change="@(args => IpfsTreeFileNameHandler(args, "TextBox"))" />
									<br />
									<div class="row">
										<RadzenButton Text="Preview" Click="@((args) => PreviewTreeHandler(args, "Button with text"))" Style="margin-left: 15px; margin-bottom: 10px; width: 150px" />
										<RadzenButton Text="Upload" Click="@((args) => PublishTreeToIpfsHandler(args, "Button with text"))" Style="margin-left: 30px; margin-bottom: 10px; width: 150px" />
									</div>
								</RadzenCard>
							</RadzenTabsItem>
							<RadzenTabsItem Text="On Chain">
                                <RadzenCard Style="padding: 20px;">
                                    <h3>Sender:</h3>
                                    <RadzenTextBox @bind-Value="@deploySender" Style="margin-bottom: 10px; width: 400px" MaxLength="1024" />
                                    <br />
									<h3>Password:</h3>
									<RadzenTextBox @bind-Value="@deployPassword" Style="margin-bottom: 10px; width: 400px" MaxLength="1024" />
									<br />
                                    <h3>Ethereum Node Url:</h3>
                                    <RadzenTextBox @bind-Value="@ethNodeUrl" Style="margin-bottom: 10px; width: 400px" MaxLength="1024" />
                                    <br />
                                    <RadzenButton Text="Deploy" Click="@((args) => DeployToChainHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                                    <br />
                                    <h3>Deploy Report:</h3>
                                    <RadzenTextArea @bind-Value="@deployMsg" Cols="50" Rows="4" Style="margin-bottom: 20px" />
                                    <br />
                                    <RadzenButton Text="Run" Click="@((args) => ExecuteOnChainHandler(args, "Button with text"))" Style="margin-bottom: 10px; width: 150px" />
                                    <br />
                                    <h3>RuleTree Report:</h3>
                                    <RadzenTextArea @bind-Value="@reportMsgFromChain" Cols="50" Rows="4" Style="margin-bottom: 20px" />
                                </RadzenCard>
							</RadzenTabsItem>
						</Tabs>
					</RadzenTabs>
				</RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </div>
</div>

<br />

@code {

	const string CONST_INFURA_IPFS_GATEWAY_URL    = BlazorAppNethereumExtensions.CONST_INFURA_IPFS_GATEWAY_URL;
	const string CONST_METADATA_FILE_IPFS_KEY     = BlazorAppNethereumExtensions.CONST_METADATA_FILE_IPFS_KEY;
	const string CONST_RULES_FILE_IPFS_KEY        = BlazorAppNethereumExtensions.CONST_RULES_FILE_IPFS_KEY;
	const string CONST_VAT_RULES_FILE_IPFS_KEY    = BlazorAppNethereumExtensions.CONST_VAT_RULES_FILE_IPFS_KEY;
	const string CONST_VAT_METADATA_FILE_IPFS_KEY = BlazorAppNethereumExtensions.CONST_VAT_METADATA_FILE_IPFS_KEY;

	bool   addRuleNotOp       = false;
	int    addRuleSetId       = 0;
	string addRuleDesc        = "";
	string addRuleTargetAttr  = "";
	string addRuleTypeNum     = "";
	string addNethRuleTypeNum = "";
	string addRuleValue1      = "";
	string addRuleValue2      = "";
	string addNethRuleAddress = "";
	IEnumerable<int> addNethRuleOpChoice = new int[] { 1 };
	IEnumerable<int> addRuleChoice       = new int[] { 1 };

	string addRuleSetDesc      = "";
	string addRuleSetTypeNum   = "";
	string addRuleSetErrLvlNum = "";
	IEnumerable<int> addRuleSetOpChoice     = new int[] { 1 };
	IEnumerable<int> addRuleSetErrLvlChoice = new int[] { 1 };

	string rules        = null;
	string attrValues   = null;
	string reportMsg    = null;
	string ipfsTreePath = null;
	string ipfsRptPath  = null;
	string ipfsHash     = null;

	int    currRuleSetId   = 0;
	string origMetadataUrl = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_METADATA_FILE_IPFS_KEY);
	string currMetadataUrl = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_METADATA_FILE_IPFS_KEY);
	string origRulesUrl    = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_RULES_FILE_IPFS_KEY);
	string currRulesUrl    = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_RULES_FILE_IPFS_KEY);
	string origRules       = "";
	string ethNodeUrl      = "http://testchain.nethereum.com:8545";
	string currRuleName    = "";
	string currErrMsg      = "";
	string currXml         = "";

	string deploySender       = "0x12890D2cce102216644c59daE5baed380d84830c";
	string deployPassword     = "0xb5b1870957d373ef0eeffecc6e4812c0fd08f554b37b233526acc331bf1544f7";
	string deployMsg          = "";
	string reportMsgFromChain = "";

	string altRulesUrl    = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_VAT_RULES_FILE_IPFS_KEY);
	string altMetadataUrl = String.Format("{0}/{1}", CONST_INFURA_IPFS_GATEWAY_URL, CONST_VAT_METADATA_FILE_IPFS_KEY);

	WonkaBizRuleTreeReport currTreeReport = null;
	WonkaBizRulesEngine    rulesEngine    = null;

	WonkaBizRuleSet currRuleSet = null;

	Wonka.Eth.Init.WonkaEthEngineInitialization currEngineInit = null;

	IEnumerable<string> entries = null;

	static List<string> allRuleSetNames     = null;
	static List<string> errorRuleSetNames   = null;
	static List<string> warningRuleSetNames = null;
	static List<string> opAndRuleSetNames   = null;

	Dictionary<string, string> details = new Dictionary<string, string>();

	protected override void OnInitialized()
	{
		WonkaRefEnvironment WonkaRefEnv =
			WonkaRefEnvironment.CreateInstance(false, new Wonka.BizRulesEngine.Samples.WonkaBreMetadataTestSource());

		WonkaRefAttr AccountIDAttr       = WonkaRefEnv.GetAttributeByAttrName("BankAccountID");
		WonkaRefAttr AccountNameAttr     = WonkaRefEnv.GetAttributeByAttrName("BankAccountName");
		WonkaRefAttr AccountStsAttr      = WonkaRefEnv.GetAttributeByAttrName("AccountStatus");
		WonkaRefAttr AccountCurrValAttr  = WonkaRefEnv.GetAttributeByAttrName("AccountCurrValue");
		WonkaRefAttr AccountTypeAttr     = WonkaRefEnv.GetAttributeByAttrName("AccountType");
		WonkaRefAttr AccountCurrencyAttr = WonkaRefEnv.GetAttributeByAttrName("AccountCurrency");
		WonkaRefAttr RvwFlagAttr         = WonkaRefEnv.GetAttributeByAttrName("AuditReviewFlag");
		WonkaRefAttr CreationDtAttr      = WonkaRefEnv.GetAttributeByAttrName("CreationDt");

		if (!String.IsNullOrEmpty(currMetadataUrl) && (currMetadataUrl != origMetadataUrl))
		{
			using (var client = new System.Net.Http.HttpClient())
			{
				var metadata = client.GetStringAsync(currMetadataUrl).Result;
				WonkaRefEnv.AppendMetadata(metadata);
			}
		}

		using (var client = new System.Net.Http.HttpClient())
		{
			rules = client.GetStringAsync(currRulesUrl).Result;

			if (String.IsNullOrEmpty(origRules))
				origRules = rules;
		}

		rulesEngine = new WonkaBizRulesEngine(new StringBuilder(rules));

		currRuleSet = rulesEngine.RuleTreeRoot;

		entries = new List<string>() { currRuleSet.Description };

		attrValues =
			  "BankAccountID=123456789\nBankAccountName=JohnSmithFirstCheckingAccount\nAccountStatus=ACT\nAccountCurrValue=1000" +
			  "\nAccountType=Checking\nAccountCurrency=USD\nAuditReviewFlag=Y\nCreationDt=02/02/2011";

		ResetCaches();
	}

	#region Add RuleSet Tab Handlers

	void AddRuleSetDescHandler(string value, string name)
	{
		addRuleSetDesc = value;

		StateHasChanged();
	}

	void AddRuleSetSeverityChange(IEnumerable<int> value, string name)
	{
		addRuleSetErrLvlNum = string.Join(", ", value);

		StateHasChanged();
	}

	void AddRuleSetOpChange(IEnumerable<int> value, string name)
	{
		addRuleSetTypeNum = string.Join(", ", value);

		StateHasChanged();
	}

	void AddRuleSetTargetRSChange(object value, string name)
	{
		var oTargetRS = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

		string sTargetRSDesc = (string)oTargetRS;

		addRuleSetId = FindRuleSet(sTargetRSDesc).RuleSetId;

		StateHasChanged();
	}

	void AddRuleSetHandler(MouseEventArgs args, string buttonName)
	{
		var ParentRuleSet = rulesEngine.FindRuleSet(addRuleSetId);

		try
		{
			var RSTypeNum   = !String.IsNullOrEmpty(addRuleSetTypeNum) ? addRuleSetTypeNum : "1";
			var RSErrLvlNum = !String.IsNullOrEmpty(addRuleSetErrLvlNum) ? addRuleSetErrLvlNum : "1";

			var JustAddedRuleSet = ParentRuleSet.AddNewRuleSet(addRuleSetDesc, RSTypeNum, RSErrLvlNum);

			ShowRuleSetAddSuccessDialog().ConfigureAwait(false);

			IncludeNewRuleSet(JustAddedRuleSet);
			//ResetCaches();

			StateHasChanged();
		}
		catch (System.Data.DataException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	#endregion

	#region Add Rule Tab Handlers

	void AddRuleIdHandler(string value, string name)
	{
		addRuleDesc = value;

		StateHasChanged();
	}

	void AddRuleTargetAttrChange(object value, string name)
	{
		var oTargetAttr = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

		addRuleTargetAttr = (string)oTargetAttr;

		StateHasChanged();
	}

	void AddRuleNotOpHandler(bool? value, string name)
	{
		// events.Add(DateTime.Now, $"{name} value changed to {value}");
		StateHasChanged();
	}

	void AddRuleTargetRSChange(object value, string name)
	{
		var oTargetRS = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

		string sTargetRSDesc = (string)oTargetRS;

		addRuleSetId = FindRuleSet(sTargetRSDesc).RuleSetId;

		StateHasChanged();
	}

	void AddRuleTargetTypeChange(IEnumerable<int> value, string name)
	{
		addRuleTypeNum = string.Join(", ", value);

		StateHasChanged();
	}

	void AddNethRuleOpChange(IEnumerable<int> value, string name)
	{
		addNethRuleTypeNum = string.Join(", ", value);

		if (addNethRuleTypeNum == "1")
		{
			addRuleValue1 = "[Min_Balance]";
			addRuleValue2 = "[Max_Balance]";
		}
		else if (addNethRuleTypeNum == "2")
		{
			addRuleValue1 = "[Block_Range_Min]";
			addRuleValue2 = "[Block_Range_Max]";
		}
		else if (addNethRuleTypeNum == "3")
		{
			addRuleValue1 = "[Owner_EOA_Address]";
			addRuleValue2 = "N/A";
		}
		else if (addNethRuleTypeNum == "4")
		{
			addRuleValue1 = "[Contract_Config_Http_Url]";
			addRuleValue2 = "[Contract_Function_Name]";
		}
		else if (addNethRuleTypeNum == "5")
		{
			addRuleValue1 = "[AttributeNameUsedInSignature]";

			// NOTE: In order to be actually useful, this should also be an Attribute
			addRuleValue2 = "[Signature]";
		}

		StateHasChanged();
	}

	void AddNethRuleAddressHandler(string value, string name)
	{
		addNethRuleAddress = value;

		StateHasChanged();
	}

	void AddRuleValue1Handler(string value, string name)
	{
		addRuleValue1 = value;

		StateHasChanged();
	}

	void AddRuleValue2Handler(string value, string name)
	{
		addRuleValue2 = value;

		StateHasChanged();
	}

	void AddRuleHandler(MouseEventArgs args, string buttonName)
	{
		currRuleSetId = FindRuleById(currRuleName).ParentRuleSetId;

		// var TargetRuleSet = rulesEngine.FindRuleSet(currRuleSetId);
		var TargetRuleSet = rulesEngine.FindRuleSet(addRuleSetId);

		try
		{
			TargetRuleSet.AddNewRule(rulesEngine.RefEnvHandle, addRuleDesc, addRuleTargetAttr, addRuleTypeNum, addRuleValue1, addRuleValue2, addRuleNotOp);

			ShowRuleAddSuccessDialog().ConfigureAwait(false);

			ClearTempVariables();

			StateHasChanged();
		}
		catch (System.Data.DataException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	void AddNethRuleHandler(MouseEventArgs args, string buttonName)
	{
		currRuleSetId = FindRuleById(currRuleName).ParentRuleSetId;

		// var TargetRuleSet = rulesEngine.FindRuleSet(currRuleSetId);
		var TargetRuleSet = rulesEngine.FindRuleSet(addRuleSetId);

		try
		{
			TargetRuleSet.AddNewNethereumRule(rulesEngine.RefEnvHandle, addRuleDesc, addRuleTargetAttr, addNethRuleTypeNum, addNethRuleAddress, addRuleValue1, addRuleValue2);

			ShowRuleAddSuccessDialog().ConfigureAwait(false);

			ClearTempVariables();

			StateHasChanged();
		}
		catch (System.Data.DataException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	#endregion

	#region Remove Rule Handlers

	void RemoveRuleHandler(MouseEventArgs args, string buttonName)
	{
		currRuleSetId = FindRuleById(currRuleName).ParentRuleSetId;

		try
		{
			var currRuleSet = rulesEngine.FindRuleSet(currRuleSetId);

			currRuleSet.RemoveRuleById(currRuleName);

			ShowRuleRemoveSuccessDialog().ConfigureAwait(false);

			ClearTempVariables();

			StateHasChanged();
		}
		catch (System.Data.DataException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	#endregion

	#region Run Engine Handlers

	void ExecuteOnChainHandler(MouseEventArgs args, string name)
	{
		try
		{
			// NOTE: Run RuleTree on Ethereum blockchain
			// NOTE: This has not yet been tested
			// reportMsgFromChain = currEngineInit.ExecuteOnChain().Result;

			StateHasChanged();
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	void DeployToChainHandler(MouseEventArgs args, string name)
	{
		try
		{
			string sDefaultSource = "N";

			currEngineInit = new Wonka.Eth.Init.WonkaEthEngineInitialization();

			currEngineInit.Engine.MetadataSource       = new Wonka.BizRulesEngine.Samples.WonkaBreMetadataTestSource();
			currEngineInit.Engine.RulesMarkupXml       = origRules;
			// currEngineInit.Engine.DotNetRetrieveMethod = RetrieveValueMethod;
			currEngineInit.EthSenderAddress            = currEngineInit.EthRuleTreeOwnerAddress = deploySender;
			currEngineInit.EthPassword                 = deployPassword;
			currEngineInit.Web3HttpUrl                 = ethNodeUrl;
			//currEngineInit.RulesEngineContractAddress  = msEngineContractAddress;
			//currEngineInit.RegistryContractAddress     = msRegistryContractAddress;
			//currEngineInit.StorageContractAddress      = msTestContractAddress;
			currEngineInit.StorageDefaultSourceId      = sDefaultSource;

			// NOTE: Deploy RuleTree (after deploying Wonka contract) to Ethereum blockchain
			bool bResult = currEngineInit.Deploy().Result;

			deployMsg = currEngineInit.GetDeploymentReport().Result;
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}

		StateHasChanged();
	}

	void IpfsReportFileNameHandler(string value, string name)
	{
		ipfsRptPath = value;

		StateHasChanged();
	}

	void IpfsTreeFileNameHandler(string value, string name)
	{
		ipfsTreePath = value;

		StateHasChanged();
	}

	void PreviewTreeHandler(MouseEventArgs args, string buttonName)
	{
		try
		{
			currXml = rulesEngine.ToXml();

			ShowPreviewDialog().ConfigureAwait(false);

			StateHasChanged();
		}
		catch (Wonka.BizRulesEngine.WonkaBizRuleException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	void PublishReportToIpfsHandler(MouseEventArgs args, string buttonName)
	{
		try
		{
			if (currTreeReport != null)
			{
				/*
				 * NOTE: Not yet working
				 * 
				ipfsHash = currTreeReport.PublishReportToIpfs(ipfsRptPath, publishService).Result;

				ShowPublishSuccessDialog().ConfigureAwait(false);
				 */

				StateHasChanged();
			}
		}
		catch (Wonka.BizRulesEngine.WonkaBizRuleException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	void PublishTreeToIpfsHandler(MouseEventArgs args, string buttonName)
	{
		try
		{
			/*
			 * NOTE: Not yet working
			 * 
			ipfsHash = rulesEngine.PublishRulesToIpfs(ipfsTreePath);

			ShowPublishSuccessDialog().ConfigureAwait(false);
			 */

			StateHasChanged();
		}
		catch (Wonka.BizRulesEngine.WonkaBizRuleException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	void RunEngineHandler(MouseEventArgs args, string buttonName)
	{
		try
		{
			WonkaRefEnvironment WonkaRefEnv =
				WonkaRefEnvironment.CreateInstance(false, new Wonka.BizRulesEngine.Samples.WonkaBreMetadataTestSource());

			WonkaRefAttr AccountIDAttr       = WonkaRefEnv.GetAttributeByAttrName("BankAccountID");
			WonkaRefAttr AccountNameAttr     = WonkaRefEnv.GetAttributeByAttrName("BankAccountName");
			WonkaRefAttr AccountStsAttr      = WonkaRefEnv.GetAttributeByAttrName("AccountStatus");
			WonkaRefAttr AccountCurrValAttr  = WonkaRefEnv.GetAttributeByAttrName("AccountCurrValue");
			WonkaRefAttr AccountTypeAttr     = WonkaRefEnv.GetAttributeByAttrName("AccountType");
			WonkaRefAttr AccountCurrencyAttr = WonkaRefEnv.GetAttributeByAttrName("AccountCurrency");
			WonkaRefAttr RvwFlagAttr         = WonkaRefEnv.GetAttributeByAttrName("AuditReviewFlag");
			WonkaRefAttr CreationDtAttr      = WonkaRefEnv.GetAttributeByAttrName("CreationDt");

			if (!String.IsNullOrEmpty(attrValues) && attrValues.Contains("\n"))
			{
				var TestProduct = new WonkaProduct();

				string[] asAttrNameValuePairs = attrValues.Split("\n");
				foreach (string sNameValPair in asAttrNameValuePairs)
				{
					if (sNameValPair.Contains("="))
					{
						string[] asNameValue = sNameValPair.Split("=");

						if (!String.IsNullOrEmpty(asNameValue[0]) && !String.IsNullOrEmpty(asNameValue[1]))
						{
							var TmpRefAttr = WonkaRefEnv.GetAttributeByAttrName(asNameValue[0]);

							TestProduct.SetAttribute(TmpRefAttr, asNameValue[1]);
						}
					}
				}

				var RulesReport = currTreeReport = rulesEngine.Validate(TestProduct);

				if (RulesReport.OverallRuleTreeResult == ERR_CD.CD_SUCCESS)
				{
					reportMsg = "";

					ShowEngineSuccessDialog().ConfigureAwait(false);
				}
				else
				{
					reportMsg = "ERROR!\n" + RulesReport.GetErrors();
				}

				StateHasChanged();
			}
		}
		catch (Wonka.BizRulesEngine.WonkaBizRuleException ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	#endregion

	void ChooseMetadataUrlChange(string value, string name)
	{
		// events.Add(DateTime.Now, $"{name} value changed");
	}

	// NOTE: Yet to be used appropriately
	void ChooseRulesUrlChange(string value, string name)
	{
		// events.Add(DateTime.Now, $"{name} value changed");
	}

	void ClearTempVariables()
	{
		addRuleNotOp = false;
		addRuleSetId = 0;
		addRuleDesc  = "";

		addRuleTargetAttr  = "";
		addRuleTypeNum     = "";
		addNethRuleAddress = "";
		addRuleValue1      = "";
		addRuleValue2      = "";
	}

	WonkaBizRuleSet FindRuleSet(int pnRuleSetId)
	{
		return rulesEngine.FindRuleSet(pnRuleSetId);
	}

	WonkaBizRuleSet FindRuleSet(string psSoughtDescName)
	{
		return rulesEngine.FindRuleSet(psSoughtDescName);
	}

	WonkaBizRule FindRuleById(string psSoughtId)
	{
		return rulesEngine.FindRuleById(psSoughtId);
	}

	string GetTextForNode(object data)
	{
		var name = (string)data;

		return name;
	}

	void IncludeNewRuleSet(WonkaBizRuleSet poNewSet)
	{
		allRuleSetNames.Add(poNewSet.Description);

		if ((poNewSet.ErrorSeverity == RULE_SET_ERR_LVL.ERR_LVL_SEVERE) && (poNewSet.ChildRuleSets.Count == 0))
			errorRuleSetNames.Add(poNewSet.GetRuleSetDescription());

		if ((poNewSet.ErrorSeverity == RULE_SET_ERR_LVL.ERR_LVL_WARNING) && (poNewSet.ChildRuleSets.Count == 0))
			warningRuleSetNames.Add(poNewSet.GetRuleSetDescription());

		if (poNewSet.RulesEvalOperator == RULE_OP.OP_AND)
			opAndRuleSetNames.Add(poNewSet.GetRuleSetDescription());
	}

	public bool IsRuleSet(string psName)
	{
		var FoundRuleSet = FindRuleSet((string)psName);

		return FoundRuleSet.IsValidRuleSet();
	}

	void OpenRulesXmlHandler(MouseEventArgs args, string buttonName)
	{
		try
		{
			OnInitialized();

			StateHasChanged();

			ShowRuleTreeResetSuccessDialog().ConfigureAwait(false);
		}
		catch (Exception ex)
		{
			currErrMsg = ex.Message;
			ShowErrorDialog().ConfigureAwait(false);
		}
	}

	RenderFragment<RadzenTreeItem> RuleSetOrRuleTemplate = (context) => builder =>
	{
		string name = context.Value as string;

		bool isRuleSet = allRuleSetNames.Contains(name);

		builder.OpenComponent<RadzenIcon>(0);
		builder.AddAttribute(1, "Icon", isRuleSet ? "label" : "code");

		if (!isRuleSet)
		{
			builder.AddAttribute(2, "Style", "margin-left: 24px; color:deepskyblue");
		}

		builder.CloseComponent();

		// Append the current item text
		builder.AddContent(3, context.Text);

		if (isRuleSet)
		{
			string sRuleSetOp = "";

			if (opAndRuleSetNames.Contains(name))
				sRuleSetOp = " - [AND]";
			else
				sRuleSetOp = " - [OR]";

			builder.AddContent(4, sRuleSetOp);

			if (errorRuleSetNames.Contains(name) || warningRuleSetNames.Contains(name))
			{
				string sIcon = "";

				if (errorRuleSetNames.Contains(name))
					sIcon = "error";
				else if (warningRuleSetNames.Contains(name))
					sIcon = "warning";
				/*
				else if (opAndRuleSetNames.Contains(name))
					sIcon = "star_border";
				else
					sIcon = "star_half";
				*/

				builder.OpenComponent<RadzenIcon>(5);
				builder.AddAttribute(6, "Icon", sIcon);
				builder.CloseComponent();
			}
		}
	};

	void LoadFiles(TreeExpandEventArgs args)
	{
		var currRuleSetName = args.Value as string;

		List<string> CurrChildren = new List<string>();

		currRuleSet = FindRuleSet(currRuleSetName);

		addRuleSetId = currRuleSet.RuleSetId;

		currRuleSet.EvaluativeRules.ToList().ForEach(x => CurrChildren.Add(x.GetRuleDescription()));
		currRuleSet.AssertiveRules.ToList().ForEach(x => CurrChildren.Add(x.GetRuleDescription()));
		currRuleSet.ChildRuleSets.ToList().ForEach(x => CurrChildren.Add(x.GetRuleSetDescription()));

		RemoveNulls(CurrChildren);

		args.Children.Data = CurrChildren;
		args.Children.Text = GetTextForNode;
		args.Children.HasChildren = (currName) => IsRuleSet((string)currName);

		args.Children.Template = RuleSetOrRuleTemplate;
	}

	void RemoveNulls(List<string> currList)
	{
		currList.RemoveAll(x => x == null);
	}

	void ResetCaches()
	{
		allRuleSetNames     = new List<string>();
		errorRuleSetNames   = new List<string>();
		warningRuleSetNames = new List<string>();
		opAndRuleSetNames   = new List<string>();

		rulesEngine.AllRuleSets.ForEach(x => allRuleSetNames.Add(x.Description));

		rulesEngine.AllRuleSets
				   .Where(x => (x.ErrorSeverity == RULE_SET_ERR_LVL.ERR_LVL_SEVERE) && (x.ChildRuleSets.Count == 0))
				   .ToList()
				   .ForEach(x => errorRuleSetNames.Add(x.GetRuleSetDescription()));

		rulesEngine.AllRuleSets
				   .Where(x => (x.ErrorSeverity == RULE_SET_ERR_LVL.ERR_LVL_WARNING) && (x.ChildRuleSets.Count == 0))
				   .ToList()
				   .ForEach(x => warningRuleSetNames.Add(x.GetRuleSetDescription()));

		rulesEngine.AllRuleSets
				   .Where(x => (x.RulesEvalOperator == RULE_OP.OP_AND))
				   .ToList()
				   .ForEach(x => opAndRuleSetNames.Add(x.GetRuleSetDescription()));
	}

	void Close(dynamic result)
	{
		StateHasChanged();
	}

	void SelectRow(TreeEventArgs args)
	{
		if (args.Text.Contains(":"))
			currRuleName = args.Text.Split(":")[1];

		details.Clear();

		string sDetails = FindRuleById(currRuleName).GetRuleDetails();

		if (sDetails.Contains("||"))
		{
			string[] asAllDetails = sDetails.Split("||");

			for (int x = 0; x < asAllDetails.Length; ++x)
				details["Detail" + x] = asAllDetails[x];
		}
		else
			details["Detail"] = sDetails;

		StateHasChanged();
	}

	void SwitchTab(int pnTabIdx, string tabName)
	{
		addRuleValue1 = addRuleValue2 = "";

		StateHasChanged();
	}

	async Task ShowSimpleDialog() => await dialogService.OpenAsync("Rule Properties", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">Rule: @FindRuleById(currRuleName)).GetRuleDialogContent()</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
					<!--<RadzenButton Text="Cancel" Click="()=> ds.Close(false)" ButtonStyle="ButtonStyle.Secondary" Style="margin-bottom: 10px; width: 150px" />-->
				</div>
			</div>
		</RadzenCard>);


	async Task ShowErrorDialog() => await dialogService.OpenAsync("WHOOPSEE!  There was a mistake.", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">@currErrMsg</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);

	async Task ShowPreviewDialog() => await dialogService.OpenAsync("PREVIEW", ds =>
		@<RadzenCard Style="padding: 20px;">
            <RadzenTextArea @bind-Value="@currXml" Cols="250" Rows="25" Style="margin-bottom: 20px" />
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);


	async Task ShowPublishSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">Saved content to IPFS, with the return hash (@ipfsHash).</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);


	async Task ShowRuleAddSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">Rule added successfully!  Please now close and expand the RuleSet node in order to refresh and observe the addition of the new Rule.</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);

	async Task ShowRuleRemoveSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">Rule removed successfully!  Please now close and expand the RuleSet node in order to refresh and observe the addition of the new Rule.</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);

	async Task ShowRuleSetAddSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">RuleSet added successfully!  Please now close and expand the parent RuleSet node in order to refresh and observe the addition of the new RuleSet.</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);

	async Task ShowRuleTreeResetSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">RuleTree reset successfully!  Please now close and expand the RuleTree in order to refresh and observe the new contents.</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);

    async Task ShowEngineSuccessDialog() => await dialogService.OpenAsync("SUCCESS!", ds =>
		@<RadzenCard Style="padding: 20px;">
			<p Style="margin-bottom: 10px;">Engine ran successfully!</p>
			<div class="row">
				<div class="col-md-12">
					<RadzenButton Text="Ok" Click="()=> ds.Close(true)" Style="margin-bottom: 10px; width: 150px" />
				</div>
			</div>
		</RadzenCard>);	

}

